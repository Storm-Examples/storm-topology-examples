/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.github.sakserv.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DeleteMutation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeleteMutation\",\"namespace\":\"com.github.sakserv.avro\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"tableId\",\"type\":\"long\"},{\"name\":\"integers\",\"type\":{\"type\":\"map\",\"values\":\"int\"}},{\"name\":\"strings\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"longs\",\"type\":{\"type\":\"map\",\"values\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence database;
  @Deprecated public java.lang.CharSequence table;
  @Deprecated public long tableId;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Integer> integers;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> strings;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Long> longs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DeleteMutation() {}

  /**
   * All-args constructor.
   */
  public DeleteMutation(java.lang.CharSequence database, java.lang.CharSequence table, java.lang.Long tableId, java.util.Map<java.lang.CharSequence,java.lang.Integer> integers, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> strings, java.util.Map<java.lang.CharSequence,java.lang.Long> longs) {
    this.database = database;
    this.table = table;
    this.tableId = tableId;
    this.integers = integers;
    this.strings = strings;
    this.longs = longs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return database;
    case 1: return table;
    case 2: return tableId;
    case 3: return integers;
    case 4: return strings;
    case 5: return longs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: database = (java.lang.CharSequence)value$; break;
    case 1: table = (java.lang.CharSequence)value$; break;
    case 2: tableId = (java.lang.Long)value$; break;
    case 3: integers = (java.util.Map<java.lang.CharSequence,java.lang.Integer>)value$; break;
    case 4: strings = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 5: longs = (java.util.Map<java.lang.CharSequence,java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'database' field.
   */
  public java.lang.CharSequence getDatabase() {
    return database;
  }

  /**
   * Sets the value of the 'database' field.
   * @param value the value to set.
   */
  public void setDatabase(java.lang.CharSequence value) {
    this.database = value;
  }

  /**
   * Gets the value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'tableId' field.
   */
  public java.lang.Long getTableId() {
    return tableId;
  }

  /**
   * Sets the value of the 'tableId' field.
   * @param value the value to set.
   */
  public void setTableId(java.lang.Long value) {
    this.tableId = value;
  }

  /**
   * Gets the value of the 'integers' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Integer> getIntegers() {
    return integers;
  }

  /**
   * Sets the value of the 'integers' field.
   * @param value the value to set.
   */
  public void setIntegers(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
    this.integers = value;
  }

  /**
   * Gets the value of the 'strings' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getStrings() {
    return strings;
  }

  /**
   * Sets the value of the 'strings' field.
   * @param value the value to set.
   */
  public void setStrings(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.strings = value;
  }

  /**
   * Gets the value of the 'longs' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Long> getLongs() {
    return longs;
  }

  /**
   * Sets the value of the 'longs' field.
   * @param value the value to set.
   */
  public void setLongs(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
    this.longs = value;
  }

  /** Creates a new DeleteMutation RecordBuilder */
  public static com.github.sakserv.avro.DeleteMutation.Builder newBuilder() {
    return new com.github.sakserv.avro.DeleteMutation.Builder();
  }
  
  /** Creates a new DeleteMutation RecordBuilder by copying an existing Builder */
  public static com.github.sakserv.avro.DeleteMutation.Builder newBuilder(com.github.sakserv.avro.DeleteMutation.Builder other) {
    return new com.github.sakserv.avro.DeleteMutation.Builder(other);
  }
  
  /** Creates a new DeleteMutation RecordBuilder by copying an existing DeleteMutation instance */
  public static com.github.sakserv.avro.DeleteMutation.Builder newBuilder(com.github.sakserv.avro.DeleteMutation other) {
    return new com.github.sakserv.avro.DeleteMutation.Builder(other);
  }
  
  /**
   * RecordBuilder for DeleteMutation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeleteMutation>
    implements org.apache.avro.data.RecordBuilder<DeleteMutation> {

    private java.lang.CharSequence database;
    private java.lang.CharSequence table;
    private long tableId;
    private java.util.Map<java.lang.CharSequence,java.lang.Integer> integers;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> strings;
    private java.util.Map<java.lang.CharSequence,java.lang.Long> longs;

    /** Creates a new Builder */
    private Builder() {
      super(com.github.sakserv.avro.DeleteMutation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.github.sakserv.avro.DeleteMutation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tableId)) {
        this.tableId = data().deepCopy(fields()[2].schema(), other.tableId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.integers)) {
        this.integers = data().deepCopy(fields()[3].schema(), other.integers);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.strings)) {
        this.strings = data().deepCopy(fields()[4].schema(), other.strings);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longs)) {
        this.longs = data().deepCopy(fields()[5].schema(), other.longs);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DeleteMutation instance */
    private Builder(com.github.sakserv.avro.DeleteMutation other) {
            super(com.github.sakserv.avro.DeleteMutation.SCHEMA$);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tableId)) {
        this.tableId = data().deepCopy(fields()[2].schema(), other.tableId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.integers)) {
        this.integers = data().deepCopy(fields()[3].schema(), other.integers);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.strings)) {
        this.strings = data().deepCopy(fields()[4].schema(), other.strings);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longs)) {
        this.longs = data().deepCopy(fields()[5].schema(), other.longs);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'database' field */
    public java.lang.CharSequence getDatabase() {
      return database;
    }
    
    /** Sets the value of the 'database' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setDatabase(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.database = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'database' field has been set */
    public boolean hasDatabase() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'database' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearDatabase() {
      database = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'table' field */
    public java.lang.CharSequence getTable() {
      return table;
    }
    
    /** Sets the value of the 'table' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.table = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'table' field has been set */
    public boolean hasTable() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'table' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearTable() {
      table = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'tableId' field */
    public java.lang.Long getTableId() {
      return tableId;
    }
    
    /** Sets the value of the 'tableId' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setTableId(long value) {
      validate(fields()[2], value);
      this.tableId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'tableId' field has been set */
    public boolean hasTableId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'tableId' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearTableId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'integers' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Integer> getIntegers() {
      return integers;
    }
    
    /** Sets the value of the 'integers' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setIntegers(java.util.Map<java.lang.CharSequence,java.lang.Integer> value) {
      validate(fields()[3], value);
      this.integers = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'integers' field has been set */
    public boolean hasIntegers() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'integers' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearIntegers() {
      integers = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'strings' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getStrings() {
      return strings;
    }
    
    /** Sets the value of the 'strings' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setStrings(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.strings = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'strings' field has been set */
    public boolean hasStrings() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'strings' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearStrings() {
      strings = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'longs' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Long> getLongs() {
      return longs;
    }
    
    /** Sets the value of the 'longs' field */
    public com.github.sakserv.avro.DeleteMutation.Builder setLongs(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
      validate(fields()[5], value);
      this.longs = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'longs' field has been set */
    public boolean hasLongs() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'longs' field */
    public com.github.sakserv.avro.DeleteMutation.Builder clearLongs() {
      longs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public DeleteMutation build() {
      try {
        DeleteMutation record = new DeleteMutation();
        record.database = fieldSetFlags()[0] ? this.database : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.table = fieldSetFlags()[1] ? this.table : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tableId = fieldSetFlags()[2] ? this.tableId : (java.lang.Long) defaultValue(fields()[2]);
        record.integers = fieldSetFlags()[3] ? this.integers : (java.util.Map<java.lang.CharSequence,java.lang.Integer>) defaultValue(fields()[3]);
        record.strings = fieldSetFlags()[4] ? this.strings : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        record.longs = fieldSetFlags()[5] ? this.longs : (java.util.Map<java.lang.CharSequence,java.lang.Long>) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
